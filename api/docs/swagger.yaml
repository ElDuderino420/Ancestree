basePath: /api/v1
definitions:
  models.FamilyTree:
    properties:
      edges:
        items:
          $ref: '#/definitions/models.Relation'
        type: array
      nodes:
        items:
          $ref: '#/definitions/models.Person'
        type: array
    type: object
  models.Person:
    properties:
      birthday:
        type: string
      birthname:
        type: string
      deathday:
        type: string
      fullname:
        type: string
      gender:
        type: integer
    type: object
  models.Relation:
    properties:
      child:
        type: string
      parent:
        type: string
      type:
        type: integer
    type: object
host: localhost:9000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server celler server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Example API
  version: "1.0"
paths:
  /person/:
    post:
      consumes:
      - application/json
      description: Creates a Person
      parameters:
      - description: Person
        in: body
        name: person
        required: true
        schema:
          $ref: '#/definitions/models.Person'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Person'
      summary: Create Person
      tags:
      - person
  /person/{id}:
    get:
      consumes:
      - application/json
      description: Gets Person by ID
      parameters:
      - description: Person ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Person'
      summary: Get Person
      tags:
      - person
    put:
      consumes:
      - application/json
      description: Updates a Person
      parameters:
      - description: Person ID
        in: path
        name: id
        required: true
        type: string
      - description: Person
        in: body
        name: person
        required: true
        schema:
          $ref: '#/definitions/models.Person'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Person'
      summary: Update Person
      tags:
      - person
  /person/child/{id}:
    post:
      consumes:
      - application/json
      description: Creates a Person
      parameters:
      - description: Person ID
        in: path
        name: id
        required: true
        type: string
      - description: Person
        in: body
        name: person
        required: true
        schema:
          $ref: '#/definitions/models.Person'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Person'
      summary: Create Child link
      tags:
      - person
  /person/link/{childId}/{parentId}:
    post:
      consumes:
      - application/json
      description: Creates a Person
      parameters:
      - description: Child ID
        in: path
        name: childId
        required: true
        type: string
      - description: Parent ID
        in: path
        name: parentId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Create Child link
      tags:
      - person
  /person/parent/{id}:
    post:
      consumes:
      - application/json
      description: Creates a Person
      parameters:
      - description: Person ID
        in: path
        name: id
        required: true
        type: string
      - description: Person
        in: body
        name: person
        required: true
        schema:
          $ref: '#/definitions/models.Person'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Person'
      summary: Create Parent link
      tags:
      - person
  /tree/{id}:
    get:
      consumes:
      - application/json
      description: Gets Familiy Tree for a given Person ID
      parameters:
      - description: Person ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.FamilyTree'
      summary: Get Familiy Tree
      tags:
      - tree
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
  BasicAuth:
    type: basic
  OAuth2AccessCode:
    authorizationUrl: https://example.com/oauth/authorize
    flow: accessCode
    scopes:
      admin: ' Grants read and write access to administrative information'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Application:
    flow: application
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Implicit:
    authorizationUrl: https://example.com/oauth/authorize
    flow: implicit
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    type: oauth2
  OAuth2Password:
    flow: password
    scopes:
      admin: ' Grants read and write access to administrative information'
      read: ' Grants read access'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
swagger: "2.0"
x-extension-openapi:
  example: value on a json format
